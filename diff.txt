diff --git a/app/authenticate.ts b/app/authenticate.ts
index 4586d62..be44a23 100644
--- a/app/authenticate.ts
+++ b/app/authenticate.ts
@@ -2,13 +2,13 @@ import { createContext, useState, useEffect } from 'react'
 import { API_HOST, GCP_IAP_HEADERS } from '../constants'
 import { User } from '../components/interface'
 
-export const Authentication = createContext<{
+export type AuthContextType = {
   currentUser?: User
   authenticateUser: () => void
-}>({
-  currentUser: undefined,
-  authenticateUser: () => {}
-})
+}
+
+export const Authentication = createContext<AuthContextType>(undefined as unknown as AuthContextType)
+
 
 export const useAuthContext = () => {
   const [currentUser, setCurrentUser] = useState<User | undefined>(undefined)
diff --git a/app/page.tsx b/app/page.tsx
index 7cb83c6..4f74d5c 100644
--- a/app/page.tsx
+++ b/app/page.tsx
@@ -1,31 +1,38 @@
 'use client'
 
 import { Flex } from '@radix-ui/themes'
-import { Chat, SideBar, PersonaPanel, ChatContext, useChatContext } from '@/components'
+import { Chat, SideBar, ChatContext, useChatContext } from '@/components'
+
+import { PersonaContext, PersonaPanel, usePersonaContext } from '@/components'
 
 import PersonaModal from '../components/Persona/PersonaModal'
-import { Authentication, useAuthContext } from './authenticate'
+import { Authentication, useAuthContext, AuthContextType } from './authenticate'
 import { Toaster, Banner } from '@/components'
 import { Header } from '@/components/Header/Header'
+import { ChatContextType } from '@/components/Chat/context'
+import { PersonaContextType } from '@/components/Persona/persona.context'
 
 const ChatPage = () => {
-  const provider = useChatContext()
-  const authProvider = useAuthContext()
+  const chatProvider:ChatContextType = useChatContext()
+  const authProvider:AuthContextType = useAuthContext()
+  const personaProvider:PersonaContextType = usePersonaContext()
 
   return (
     <Authentication.Provider value={authProvider}>
-      <ChatContext.Provider value={provider}>
+      <ChatContext.Provider value={chatProvider}>
+        <PersonaContext.Provider value={personaProvider}>
           <Banner />
           <Header />
           <Flex className="relative chat-flex">
             <SideBar />
             <div className="flex-1 relative">
-              <Chat ref={provider.chatRef} />
+              <Chat ref={chatProvider.chatRef} />
               <PersonaPanel />
             </div>
           </Flex>
           <PersonaModal />
           <Toaster />
+        </PersonaContext.Provider>
       </ChatContext.Provider>
     </Authentication.Provider>
   )
diff --git a/components/Chat/Chat.component.tsx b/components/Chat/Chat.component.tsx
index 6a53227..a25c56b 100644
--- a/components/Chat/Chat.component.tsx
+++ b/components/Chat/Chat.component.tsx
@@ -7,30 +7,27 @@ import { FiSend } from 'react-icons/fi'
 import { AiOutlineClear, AiOutlineLoading3Quarters, AiOutlineUnorderedList } from 'react-icons/ai'
 import clipboard from 'clipboard'
 import { useToast } from '@/components'
-import { ChatMessage } from '../interface'
-import { ChatContext } from './chat.context'
-import Message from './Message.component'
-import EditableText from './EditableText'
+import { ChatMessage, Chat, ChatGPTInstance } from '../interface'
+import { ChatContext } from './context'
+import Message from './components/Message.component'
+import EditableText from './components/EditableText'
 import { FaRegEdit } from 'react-icons/fa'
 import { FaCheck } from 'react-icons/fa6'
 import { FaXmark } from 'react-icons/fa6'
 import { ToolSelect } from '../Tools/ToolSelect'
 import './index.scss'
 
+
 export interface ChatProps {}
 
-export interface ChatGPTInstance {
-  setConversation: (messages: ChatMessage[]) => void
-  getConversation: () => ChatMessage[]
-  focus: () => void
-}
 
 const ChatBox = (props: ChatProps, ref: any) => {
   const { toast } = useToast()
-  const toastRef = useRef<any>(null)
-  const { currentChat, currentTool, toolList, saveMessages, saveChatName, onToggleSidebar } =
+  // const toastRef = useRef<any>(null)
+  const { currentChatId, getChatById, currentTool, toolList, setMessagesById, setChatNameById, onToggleSidebar } =
     useContext(ChatContext)
 
+  const [idAtStart, setStartId] = useState<string>(currentChatId || '')
   const [isLoading, setIsLoading] = useState(false)
 
   const conversationRef = useRef<ChatMessage[]>()
@@ -46,8 +43,8 @@ const ChatBox = (props: ChatProps, ref: any) => {
   const bottomOfChatRef = useRef<HTMLDivElement>(null)
 
   const sendMessage = async (e: any) => {
-    const encoder = new TextEncoder()
-    const decoder = new TextDecoder()
+    // const encoder = new TextEncoder()
+    // const decoder = new TextDecoder()
 
     e.preventDefault()
     const input = textAreaRef.current?.value || ''
@@ -61,10 +58,16 @@ const ChatBox = (props: ChatProps, ref: any) => {
     }
     setMessage('')
     setIsLoading(true)
-    setConversation?.([...conversation!, { content: input, role: 'user' }])
+    let localIdAtStart = currentChatId || ''
+    setStartId(localIdAtStart)
 
-    let systemPrompt = currentChat?.persona?.prompt || ''
+    let updatedConversation = [...conversation!, { content: input, role: 'user' }] as ChatMessage[]
+    setConversation?.(updatedConversation)
+    localIdAtStart ? setMessagesById?.(localIdAtStart, updatedConversation): undefined
 
+    let systemPrompt = getChatById?.(currentChatId || '')?.persona?.prompt || ''
+
+    // sets the id when the messages start streaming
     try {
       const { currentStream, additionalMessages } = await postRunner(
         systemPrompt,
@@ -72,35 +75,41 @@ const ChatBox = (props: ChatProps, ref: any) => {
         input,
         currentTool,
         toolList
-      )
+      );
 
-      setConversation?.([...conversation!, { content: input, role: 'user' }, ...additionalMessages])
+      updatedConversation = [...conversation!, { content: input, role: 'user' }, ...additionalMessages] as ChatMessage[]
+      setConversation?.(updatedConversation);
+      localIdAtStart ? setMessagesById?.(localIdAtStart, updatedConversation): undefined
 
-      let resultContent = ''
+      let resultContent = '';
       for await (const chunk of currentStream as any) {
-        const decoder = new TextDecoder('utf-8')
-        console.log('sendMessage Chunks', decoder.decode(chunk))
-        const decoded = convertChunktoJsonArray(decoder.decode(chunk)) || []
+        const decoder = new TextDecoder('utf-8');
+        console.log('sendMessage Chunks', decoder.decode(chunk));
+        const decoded = convertChunktoJsonArray(decoder.decode(chunk)) || [];
         const char = decoded.reduce(
           (acc, d) => `${acc}${d?.choices?.[0]?.delta?.content || ''}`,
           ''
-        )
+        );
         if (char) {
-          setCurrentMessage((state) => {
-            resultContent = state + char
-            return resultContent
-          })
+          resultContent += char;
+          setCurrentMessage(resultContent);
         }
       }
+
       setTimeout(() => {
-        setConversation?.([
-          ...conversation!,
-          { content: input, role: 'user' },
-          ...additionalMessages,
-          { content: resultContent, role: 'assistant' }
-        ])
-        setCurrentMessage('')
-      }, 1)
+        if (localIdAtStart){
+          updatedConversation = [
+            ...conversation!,
+            { content: input, role: 'user' },
+            ...additionalMessages,
+            { content: resultContent, role: 'assistant' }
+          ];
+          setMessagesById?.(localIdAtStart, updatedConversation);
+          setCurrentMessage('');
+          setConversation?.(updatedConversation);
+        }
+
+      }, 1);
 
       setIsLoading(false)
     } catch (error: any) {
@@ -124,6 +133,8 @@ const ChatBox = (props: ChatProps, ref: any) => {
     setConversation([])
   }
 
+
+
   useEffect(() => {
     if (textAreaRef.current) {
       textAreaRef.current.style.height = '50px'
@@ -131,6 +142,7 @@ const ChatBox = (props: ChatProps, ref: any) => {
     }
   }, [message, textAreaRef])
 
+
   useEffect(() => {
     if (bottomOfChatRef.current) {
       bottomOfChatRef.current.scrollIntoView({ behavior: 'smooth' })
@@ -138,11 +150,13 @@ const ChatBox = (props: ChatProps, ref: any) => {
   }, [conversation, currentMessage])
 
   useEffect(() => {
-    conversationRef.current = conversation
-    if (currentChat?.id) {
-      saveMessages?.(conversation)
+    if (currentChatId) {
+      let chat = getChatById?.(currentChatId)
+      if(chat?.messages)
+        setConversation(chat.messages)
     }
-  }, [conversation, currentChat?.id, saveMessages])
+  }, [currentChatId, conversation])
+
 
   useEffect(() => {
     if (!isLoading) {
@@ -167,7 +181,9 @@ const ChatBox = (props: ChatProps, ref: any) => {
   useEffect(() => {
     new clipboard('.copy-btn').on('success', () => {})
   }, [])
-  // console.log('conversation',conversation)
+  
+  console.log('id matches',currentChatId, idAtStart)
+
   return (
     <Flex
       direction="column"
@@ -185,21 +201,29 @@ const ChatBox = (props: ChatProps, ref: any) => {
       >
         <EditableText
           viewProps={{
-            className: 'rt-Heading rt-r-weight-bold'
+            className: "w-[24rem] sm:w-[32rem] md:w-[30rem] lg:w-[42rem] xl:w-[56rem] 2xl:w-[72rem] rt-Heading rt-r-weight-bold",
+            style: {
+              whiteSpace: 'nowrap',
+              textOverflow: 'ellipsis',
+              // width: '400px',
+              overflow: 'hidden',
+            },
           }}
           submitOnEnter={true}
           validation={(value: string) => value.trim().length > 0}
           showButtonsOnHover={true}
           editOnViewClick={true}
-          editButtonContent={FaRegEdit()}
-          cancelButtonContent={FaXmark()}
-          saveButtonContent={FaCheck()}
-          value={currentChat?.name || currentChat?.persona?.name}
+          editButtonContent={FaRegEdit({})}
+          cancelButtonContent={FaXmark({})}
+          saveButtonContent={FaCheck({})}
+          value={getChatById?.(currentChatId||'')?.name || getChatById?.(currentChatId||'')?.persona?.name}
           type="text"
-          onSave={saveChatName}
+          onSave={(value:string)=>{
+            setChatNameById(currentChatId || '', value)
+          }}
         />
         <div className="text-xs italic" style={{ color: 'var(--accent-11)' }}>
-          {currentChat?.persona?.name}
+          {getChatById?.(currentChatId||'')?.persona?.name}
         </div>
       </Flex>
       <ScrollArea
@@ -209,19 +233,15 @@ const ChatBox = (props: ChatProps, ref: any) => {
         style={{ height: '100%' }}
       >
         {conversation?.map((item, index) => <Message key={index} message={item} />)}
-        {currentMessage && <Message message={{ content: currentMessage, role: 'assistant' }} />}
+        {currentMessage && idAtStart === currentChatId && (
+          <Message message={{ content: currentMessage, role: 'assistant' }} />
+        )}       
         <div ref={bottomOfChatRef}></div>
       </ScrollArea>
       <Flex className="px-4 pb-3" gap="3" direction={'column'}>
         <Flex shrink="1">
           <ToolSelect />
         </Flex>
-
-        {/* <Button
-          
-          >
-            hello
-          </Button> */}
         <Flex align="end" justify="between" gap="3" className="relative">
           <TextArea
             ref={textAreaRef}
@@ -251,8 +271,19 @@ const ChatBox = (props: ChatProps, ref: any) => {
                 style={{ color: 'var(--accent-11)' }}
               >
                 <AiOutlineLoading3Quarters className="animate-spin h-4 w-4" />
+                {/* <IconButton
+                  variant="soft"
+                  disabled={isLoading}
+                  color="gray"
+                  size="2"
+                  className="rounded-xl"
+                  onClick={sendMessage}
+                >
+                  <FaXmark className="h-4 w-4" />
+                </IconButton> */}
               </Flex>
             )}
+
             <IconButton
               variant="soft"
               disabled={isLoading}
diff --git a/components/Chat/chat.context.ts b/components/Chat/chat.context.ts
deleted file mode 100644
index 26dcc07..0000000
--- a/components/Chat/chat.context.ts
+++ /dev/null
@@ -1,290 +0,0 @@
-'use client'
-
-import { useCallback, useEffect, useRef, useState } from 'react'
-import { createContext } from 'react'
-
-import { v4 as uuid } from 'uuid'
-import { ChatGPTInstance } from './Chat.component'
-import { useSearchParams } from 'next/navigation'
-
-import { ChatMessage, Chat, Persona, Tool } from '../interface'
-import { usePersonaContext } from '../Persona/persona.context'
-
-export const DefaultTools: Tool[] = [
-  {
-    type: 'function',
-    display: 'Get Weather',
-    function: {
-      name: 'get_current_weather',
-      description: 'Get the current weather in a given location',
-      parameters: {
-        type: 'object',
-        properties: {
-          location: {
-            type: 'string',
-            description: 'The city and state, e.g. San Francisco, CA'
-          },
-          unit: {
-            type: 'string',
-            enum: ['celsius', 'fahrenheit']
-          }
-        },
-        required: ['location']
-      }
-    }
-  },
-  {
-    type: 'function',
-    display: 'get_joke',
-    plugin: 'CAS Scenarios',
-    function: {
-      name: 'get_joke',
-      description: 'Get a joke from the joke database',
-      parameters: {}
-    }
-  }
-]
-
-enum StorageKeys {
-  Chat_List = 'chatList',
-  Chat_Current_ID = 'chatCurrentID'
-}
-
-let isInit = false
-
-export const useChatContext = () => {
-  const {
-    personas,
-    editPersona,
-    isOpenPersonaModal,
-    personaModalLoading,
-    openPersonaPanel,
-    personaPanelType,
-    onOpenPersonaModal,
-    onClosePersonaModal,
-    onCreatePersona,
-    onDeletePersona,
-    onEditPersona,
-    onOpenPersonaPanel,
-    onClosePersonaPanel,
-    setPersonas,
-    DefaultPersonas
-  } = usePersonaContext()
-
-  const searchParams = useSearchParams()
-
-  const debug = searchParams.get('debug') === 'true'
-
-  const messagesMap = useRef<Map<string, ChatMessage[]>>(new Map<string, ChatMessage[]>())
-
-  const chatRef = useRef<ChatGPTInstance>(null)
-
-  const [currentChat, setCurrentChat] = useState<Chat | undefined>(undefined)
-
-  const [currentTool, setCurrentTool] = useState<string>('auto')
-
-  const [chatList, setChatList] = useState<Chat[]>([])
-
-  const [toggleSidebar, setToggleSidebar] = useState<boolean>(false)
-
-  const [toolList, setToolList] = useState<Tool[]>(DefaultTools)
-
-  const onChangeChat = useCallback(
-    (chat: Chat) => {
-      const oldMessages = chatRef.current?.getConversation() || []
-      const newMessages = messagesMap.current.get(chat.id) || []
-      chatRef.current?.setConversation(newMessages)
-      chatRef.current?.focus()
-      messagesMap.current.set(currentChat?.id!, oldMessages)
-      setCurrentChat(chat)
-    },
-    [currentChat?.id]
-  )
-
-  const onCreateChat = useCallback(
-    (persona: Persona) => {
-      const id = uuid()
-      const newChat: Chat = {
-        id,
-        persona: persona
-      }
-
-      setChatList((state) => {
-        return [...state, newChat]
-      })
-
-      onChangeChat(newChat)
-      onClosePersonaPanel()
-    },
-    [setChatList, onChangeChat, onClosePersonaPanel]
-  )
-
-  const onToggleSidebar = useCallback(() => {
-    setToggleSidebar((state) => !state)
-  }, [])
-
-  const onDeleteChat = (chat: Chat) => {
-    const index = chatList.findIndex((item) => item.id === chat.id)
-    chatList.splice(index, 1)
-    setChatList([...chatList])
-    if (currentChat?.id === chat.id) {
-      setCurrentChat(chatList[0])
-    }
-    if (chatList.length === 0) {
-      onOpenPersonaPanel('chat')
-    }
-  }
-
-  const saveChatName = (name: string) => {
-    const updatedChatList = chatList.map((chat) => {
-      if (chat.id === currentChat?.id) {
-        chat.name = name
-        // chat.persona.name = name;
-      }
-      return chat
-    })
-    setChatList(updatedChatList)
-    localStorage.setItem(StorageKeys.Chat_List, JSON.stringify(updatedChatList))
-  }
-
-  const saveMessages = (messages: ChatMessage[]) => {
-    if (messages.length > 0) {
-      localStorage.setItem(`ms_${currentChat?.id}`, JSON.stringify(messages))
-    } else {
-      localStorage.removeItem(`ms_${currentChat?.id}`)
-    }
-  }
-
-  useEffect(() => {
-    if (currentChat?.id) {
-      localStorage.setItem(StorageKeys.Chat_Current_ID, currentChat.id)
-    }
-  }, [currentChat?.id])
-
-  useEffect(() => {
-    const chatList = JSON.parse(localStorage.getItem(StorageKeys.Chat_List) || '[]') as Chat[]
-    const currentChatId = localStorage.getItem(StorageKeys.Chat_Current_ID)
-    if (chatList.length > 0) {
-      const currentChat = chatList.find((chat) => chat.id === currentChatId)
-      setChatList(chatList)
-
-      chatList.forEach((chat) => {
-        const messages = JSON.parse(localStorage.getItem(`ms_${chat?.id}`) || '[]') as ChatMessage[]
-        messagesMap.current.set(chat.id!, messages)
-      })
-
-      onChangeChat(currentChat || chatList[0])
-    } else {
-      onCreateChat(DefaultPersonas[0])
-    }
-
-    return () => {
-      document.body.removeAttribute('style')
-      localStorage.setItem(StorageKeys.Chat_List, JSON.stringify(chatList))
-    }
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [])
-
-  useEffect(() => {
-    if (currentChat?.id) {
-      localStorage.setItem(StorageKeys.Chat_Current_ID, currentChat.id)
-    }
-  }, [currentChat?.id])
-
-  useEffect(() => {
-    localStorage.setItem(StorageKeys.Chat_List, JSON.stringify(chatList))
-  }, [chatList])
-
-  useEffect(() => {
-    const loadedPersonas = JSON.parse(localStorage.getItem('Personas') || '[]') as Persona[]
-    const updatedPersonas = loadedPersonas.map((persona) => {
-      if (!persona.id) {
-        persona.id = uuid()
-      }
-      return persona
-    })
-    setPersonas(updatedPersonas)
-  }, [setPersonas])
-
-  useEffect(() => {
-    localStorage.setItem('Personas', JSON.stringify(personas))
-  }, [personas])
-
-  useEffect(() => {
-    if (isInit && !openPersonaPanel && chatList.length === 0) {
-      onCreateChat(DefaultPersonas[0])
-    }
-    isInit = true
-  }, [chatList.length, openPersonaPanel, onCreateChat, DefaultPersonas])
-
-  return {
-    debug,
-    DefaultPersonas,
-    chatRef,
-    currentChat,
-    chatList,
-    personas,
-    editPersona,
-    isOpenPersonaModal,
-    personaModalLoading,
-    openPersonaPanel,
-    personaPanelType,
-    toggleSidebar,
-    onOpenPersonaModal,
-    onClosePersonaModal,
-    setCurrentChat,
-    onCreateChat,
-    onDeleteChat,
-    onChangeChat,
-    onCreatePersona,
-    onDeletePersona,
-    onEditPersona,
-    saveMessages,
-    onOpenPersonaPanel,
-    onClosePersonaPanel,
-    onToggleSidebar,
-    saveChatName,
-    setCurrentTool,
-    currentTool,
-    toolList,
-    setToolList
-  }
-}
-
-export const ChatContext = createContext<{
-  debug?: boolean
-  personaPanelType: string
-  DefaultPersonas: Persona[]
-  currentChat?: Chat
-  chatList: Chat[]
-  personas: Persona[]
-  isOpenPersonaModal?: boolean
-  editPersona?: Persona
-  personaModalLoading?: boolean
-  openPersonaPanel?: boolean
-  toggleSidebar?: boolean
-  currentTool?: string
-  toolList?: Tool[]
-  onOpenPersonaModal?: () => void
-  onClosePersonaModal?: () => void
-  setCurrentChat?: (chat: Chat) => void
-  onCreatePersona?: (persona: Persona) => void
-  onDeleteChat?: (chat: Chat) => void
-  onDeletePersona?: (persona: Persona) => void
-  onEditPersona?: (persona: Persona) => void
-  onCreateChat?: (persona: Persona) => void
-  onChangeChat?: (chat: Chat) => void
-  saveMessages?: (messages: ChatMessage[]) => void
-  onOpenPersonaPanel?: (type?: string) => void
-  onClosePersonaPanel?: () => void
-  onToggleSidebar?: () => void
-  saveChatName?: (name: string) => void
-  setCurrentTool?: (tool: string) => void
-  setToolList?: (toolList: Tool[]) => void
-}>({
-  personaPanelType: 'chat',
-  DefaultPersonas: [],
-  chatList: [],
-  personas: []
-})
-export default ChatContext
diff --git a/components/Chat/chat.scss b/components/Chat/chat.scss
new file mode 100644
index 0000000..c244a6b
--- /dev/null
+++ b/components/Chat/chat.scss
@@ -0,0 +1,48 @@
+.chat-textarea {
+  .rt-TextAreaInput {
+    height: 50px;
+    @apply py-3 px-4 pr-24;
+  }
+}
+
+.chart-sider-bar {
+  @apply overflow-hidden w-64 z-10;
+
+  background-color: var(--color-background);
+  transition: 0.5s;
+
+  @apply max-md:absolute max-md:top-0 max-md:bottom-0   max-md:border-none max-md:w-0;
+
+  .rt-ScrollAreaViewport > div {
+    display: block;
+  }
+
+  > div {
+    border-right: 1px solid var(--gray-a4);
+  }
+
+  &.show {
+    @apply w-64;
+  }
+}
+
+.bg-token-surface-primary {
+  @apply flex gap-2 select-none items-center rounded-2xl px-3 py-2 duration-100;
+  background-color: var(--accent-a2);
+
+  &:hover {
+    background-color: var(--accent-a3);
+  }
+}
+
+.bg-token-surface {
+  @apply flex gap-2 select-none items-center rounded-2xl px-3 py-2 duration-100 justify-between;
+
+  &.active {
+    background-color: var(--accent-a4);
+  }
+
+  &:hover {
+    background-color: var(--accent-a3);
+  }
+}
diff --git a/components/Chat/EditableText.tsx b/components/Chat/components/EditableText.tsx
similarity index 88%
rename from components/Chat/EditableText.tsx
rename to components/Chat/components/EditableText.tsx
index cd2d59a..02f67df 100644
--- a/components/Chat/EditableText.tsx
+++ b/components/Chat/components/EditableText.tsx
@@ -176,26 +176,6 @@ function EditableText(props: any) {
           </IconButton>
         </TextField.Slot>
       </TextField.Root>
-      // <Flex direction="row" gap="3" align="center" className="group" {...props.viewContainerProps}>
-      //     <div
-      //       tabIndex={props.tabIndex}
-      //       {...props.viewProps}
-      //       onKeyDown={handleKeyDownForView}
-      //       onFocus={handleViewFocus}
-      //       onClick={viewClickHandler}
-      //     >
-      //       {_value}
-      //     </div>
-      //     <div className={'invisible group-hover:visible'}>
-      //         <IconButton size="2" variant="ghost"
-      //             // type="button"
-      //             // {...props.editButtonProps}
-      //             onClick={handleActivateEditMode}
-      //         >
-      //             {props.editButtonContent}
-      //         </IconButton>
-      //     </div>
-      // </Flex>
     )
   }
 
diff --git a/components/Chat/Markdown.tsx b/components/Chat/components/Markdown.tsx
similarity index 97%
rename from components/Chat/Markdown.tsx
rename to components/Chat/components/Markdown.tsx
index b8a26f3..683e6a7 100644
--- a/components/Chat/Markdown.tsx
+++ b/components/Chat/components/Markdown.tsx
@@ -22,7 +22,7 @@ export interface MarkdownProps {
 export const Markdown = ({ className, children }: MarkdownProps) => {
   return (
     <ReactMarkdown
-      className="prose dark:prose-invert min-w-full"
+      className="prose dark:prose-invert max-w-none"
       remarkPlugins={[remarkParse, remarkMath, remarkRehype, remarkGfm]}
       rehypePlugins={[rehypeKatex, rehypeStringify]}
       components={{
diff --git a/components/Chat/Message.component.tsx b/components/Chat/components/Message.component.tsx
similarity index 94%
rename from components/Chat/Message.component.tsx
rename to components/Chat/components/Message.component.tsx
index 9e16a92..8c0cdc8 100644
--- a/components/Chat/Message.component.tsx
+++ b/components/Chat/components/Message.component.tsx
@@ -4,9 +4,9 @@ import { useContext, useState } from 'react'
 import { Avatar, Flex } from '@radix-ui/themes'
 import { SiOpenai } from 'react-icons/si'
 import { HiUser } from 'react-icons/hi'
-import { Markdown } from '@/components'
-import { ChatContext, useChatContext } from './chat.context'
-import { ChatMessage } from '../interface'
+import { Markdown } from './Markdown'
+import { ChatContext, useChatContext } from '../context'
+import { ChatMessage } from '../../interface'
 import * as Collapsible from '@radix-ui/react-collapsible'
 import { RowSpacingIcon, Cross2Icon } from '@radix-ui/react-icons'
 import { FaAngleDown } from 'react-icons/fa'
diff --git a/components/Chat/SideBar.component.tsx b/components/Chat/components/SideBar.component.tsx
similarity index 62%
rename from components/Chat/SideBar.component.tsx
rename to components/Chat/components/SideBar.component.tsx
index ca394ec..8d15e1e 100644
--- a/components/Chat/SideBar.component.tsx
+++ b/components/Chat/components/SideBar.component.tsx
@@ -4,23 +4,31 @@ import { Box, Flex, IconButton, ScrollArea, Text } from '@radix-ui/themes'
 import React, { useContext } from 'react'
 import cs from 'classnames'
 import { AiOutlineCloseCircle } from 'react-icons/ai'
-import { ChatContext } from './chat.context'
+import { ChatContext } from '../context/index'
 import { FaPlus } from 'react-icons/fa6'
 import { FaTheaterMasks } from 'react-icons/fa'
+import { Chat } from '../../interface'
+import { ChatContextType } from '../context/index'
 
-import './index.scss'
+import '../index.scss'
+import { PersonaContext } from '@/components/Persona'
 
 export const SideBar = () => {
+  const extra = useContext(ChatContext)
   const {
-    currentChat,
+    currentChatId,
     chatList,
-    DefaultPersonas,
     toggleSidebar,
     onDeleteChat,
     onChangeChat,
     onCreateChat,
-    onOpenPersonaPanel
-  } = useContext(ChatContext)
+    getChatById
+  }  = extra
+  console.log(extra)
+
+  const { DefaultPersonas, onOpenPersonaPanel} = useContext(PersonaContext)
+
+
 
   return (
     <Flex direction="column" className={cs('chart-sider-bar', { show: toggleSidebar })}>
@@ -30,24 +38,33 @@ export const SideBar = () => {
           onClick={() => onCreateChat?.(DefaultPersonas[0])}
           className="bg-token-surface-primary active:scale-95 "
         >
-          {/* <SiOpenai className="h-5 w-5" /> */}
           <FaPlus />
           <Text>New Chat</Text>
         </Box>
-        <ScrollArea className="flex-1" type="auto" scrollbars="vertical">
+        <ScrollArea type="auto" scrollbars="vertical">
           <Flex direction="column" gap="3">
-            {chatList.map((chat) => {
+            {chatList.map((id:string) => {
+              let chat = getChatById(id) || {} as Chat
+              if(currentChatId === id){
+                console.log('current Id', currentChatId)
+              //   console.log('current Chat', chat)
+              //   console.log('chat Id List:', chatList)
+              }
               return (
                 <Box
-                  key={chat.id}
+                  key={id}
                   width="auto"
                   className={cs('bg-token-surface active:scale-95 truncate', {
-                    active: currentChat?.id === chat.id
+                    active: currentChatId === id
                   })}
-                  onClick={() => onChangeChat?.(chat)}
+                  display="block"
+                  onClick={() => {
+                    onChangeChat(id)
+                    console.log('onClick',id)
+                  }}
                 >
-                  <Text as="p" className="truncate">
-                    {chat?.name || chat.persona?.name}
+                  <Text as="p" className="truncate" style={{maxWidth: 190}}>
+                    {chat?.name || 'FAKE'}
                   </Text>
                   <IconButton
                     size="2"
@@ -56,7 +73,7 @@ export const SideBar = () => {
                     radius="full"
                     onClick={(e) => {
                       e.stopPropagation()
-                      onDeleteChat?.(chat)
+                      onDeleteChat(id)
                     }}
                   >
                     <AiOutlineCloseCircle className="h-4 w-4" />
diff --git a/components/Chat/context/chat.context.ts b/components/Chat/context/chat.context.ts
new file mode 100644
index 0000000..166d78d
--- /dev/null
+++ b/components/Chat/context/chat.context.ts
@@ -0,0 +1,132 @@
+import { useCallback, useEffect, useState, useRef } from 'react'
+import { createContext } from 'react'
+import { v4 as uuid } from 'uuid'
+import { useSearchParams } from 'next/navigation'
+import { ChatMessage, Chat, Persona, Tool, ChatGPTInstance } from '../../interface'
+import { usePersonaContext } from '../../Persona/persona.context'
+import { DefaultTools } from '../../Tools/default_tools'
+import { useLocalStorageContext } from '../../localStorage'
+
+
+export const useChatContext = () => {
+  const {
+    // personas,
+    onClosePersonaPanel,
+    setPersonas,
+    DefaultPersonas
+  } = usePersonaContext()
+
+  const {
+    state,
+    setStorageState,
+    appendMessageById,
+    setMessagesById,
+    getChatById,
+    setChatById,
+    setChatNameById,
+    deleteChatById,
+  }  = useLocalStorageContext()
+
+  const searchParams = useSearchParams()
+  const chatRef = useRef<ChatGPTInstance>(null)
+  const debug = searchParams.get('debug') === 'true'
+  const [chatList, setChatList] = useState<string[]>([])
+  const [toggleSidebar, setToggleSidebar] = useState<boolean>(false)
+  const [currentTool, setCurrentTool] = useState<string>('auto')
+  const [toolList, setToolList] = useState<Tool[]>(DefaultTools || [])
+  const [currentChatId, setCurrentChatId] = useState<string|undefined>(undefined)
+
+  const onChangeChat = useCallback(
+    (id: string) => {
+      console.log('onChangeChat', id)
+      setCurrentChatId(id)
+    },
+    []
+  )
+
+  const onCreateChat = useCallback(
+    (persona: Persona) => {
+      const id = uuid()
+      const newChat: Chat = {
+        id,
+        name: 'Untitled',
+        messages: [],
+        persona: persona,
+        date: Date.now()
+      }
+      setChatById(id, newChat)
+      setChatList((state) => {
+        return [id, ...state]
+      })
+      setCurrentChatId(id)
+      onClosePersonaPanel()
+    },
+    [setChatList, setChatById, onClosePersonaPanel]
+  )
+
+  const onToggleSidebar = useCallback(() => {
+    setToggleSidebar((state) => !state)
+  }, [])
+
+  const onDeleteChat = (id: string) => {
+    deleteChatById(id)
+  }
+
+  useEffect(() => {
+    let stateKeys = Object.keys(state?.chats)
+    stateKeys.sort((a:string, b:string) => {
+      const dateA = state.chats[a].date;
+      const dateB = state.chats[b].date;
+      return dateB - dateA
+    });
+    setChatList(stateKeys)
+    if (stateKeys.length === 0 && state.appState.loaded === true) {
+      onCreateChat(DefaultPersonas[0]);
+    }
+  }, [state]);
+
+  useEffect(() => {
+    if ((!currentChatId || !chatList.includes(currentChatId)) && chatList.length > 0) {
+      setCurrentChatId(chatList[0]);
+    }
+  }, [currentChatId, chatList, setCurrentChatId]);
+
+  useEffect(() => {
+    const loadedPersonas = JSON.parse(localStorage.getItem('Personas') || '[]') as Persona[]
+    const updatedPersonas = loadedPersonas.map((persona) => {
+      if (!persona.id) {
+        persona.id = uuid()
+      }
+      return persona
+    })
+    setPersonas(updatedPersonas)
+  }, [setPersonas])
+
+  return {
+    debug,
+    chatRef,
+
+    onCreateChat,
+    onDeleteChat,
+    onChangeChat,
+    currentChatId,
+    chatList,
+    setCurrentChatId,
+
+    onToggleSidebar,
+    toggleSidebar,
+
+    setCurrentTool,
+    currentTool,
+    toolList,
+    setToolList,
+    
+    setStorageState,
+    appendMessageById,
+    setMessagesById,
+    getChatById,
+    setChatById,
+    setChatNameById,
+    deleteChatById,
+  }
+}
\ No newline at end of file
diff --git a/components/Chat/context/index.ts b/components/Chat/context/index.ts
new file mode 100644
index 0000000..8cb7fbb
--- /dev/null
+++ b/components/Chat/context/index.ts
@@ -0,0 +1,41 @@
+
+import { createContext, Ref } from 'react'
+import { Tool, ChatMessage, Chat, Persona, ChatGPTInstance } from '../../interface'
+
+export { useChatContext } from './chat.context'
+
+
+export type ChatContextType = {
+  debug: boolean
+  chatRef: Ref<ChatGPTInstance> | undefined
+
+  // sidebar fields
+  toggleSidebar: boolean
+  onToggleSidebar: () => void
+
+  // Tool Fields
+  currentTool: string
+  toolList: Tool[]
+  setCurrentTool: (tool: string) => void
+  setToolList: (toolList: Tool[]) => void
+
+  // Chat specific fields
+  chatList: string[]
+  currentChatId: string | undefined
+  onCreateChat: (persona: Persona) => void
+  setCurrentChatId: (id: string) => void
+  onDeleteChat: (id: string) => void
+  onChangeChat: (id: string) => void
+  
+  // LocalStorage
+  setStorageState: (state: any) => void
+  appendMessageById: (id: string, message:ChatMessage) => void
+  setChatById: (id: string, chat:Chat) => void
+  setChatNameById: (id: string, name: string) => void
+  deleteChatById: (id: string) => void 
+  getChatById: (id: string) => Chat
+  setMessagesById: (id: string, messages: ChatMessage[]) => void 
+}
+
+
+export const ChatContext = createContext<ChatContextType>(undefined as unknown as ChatContextType)
\ No newline at end of file
diff --git a/components/Chat/index.ts b/components/Chat/index.ts
index 14a2d96..5ba24e8 100644
--- a/components/Chat/index.ts
+++ b/components/Chat/index.ts
@@ -1,3 +1,3 @@
 export { default as Chat } from './Chat.component'
-export { useChatContext, ChatContext } from './chat.context'
-export { SideBar } from './SideBar.component'
+export { useChatContext, ChatContext } from './context'
+export { SideBar } from './components/SideBar.component'
diff --git a/components/Header/Header.tsx b/components/Header/Header.tsx
index 5953aa4..6082e53 100644
--- a/components/Header/Header.tsx
+++ b/components/Header/Header.tsx
@@ -14,7 +14,7 @@ import { IoSunny } from 'react-icons/io5'
 import { HeaderUser } from './HeaderUser'
 import { useTheme } from '../Themes'
 import { useCallback, useState, useContext } from 'react'
-import { ChatContext } from '../Chat/chat.context'
+import { ChatContext } from '../Chat/context'
 
 
 export interface HeaderProps {
diff --git a/components/Persona/PersonaModal.tsx b/components/Persona/PersonaModal.tsx
index 9fb2748..b2587bc 100644
--- a/components/Persona/PersonaModal.tsx
+++ b/components/Persona/PersonaModal.tsx
@@ -4,16 +4,16 @@ import { Button, Dialog, Flex, TextField, TextArea } from '@radix-ui/themes'
 import { useForm } from 'react-hook-form'
 import { Persona } from '../interface'
 
-import { ChatContext } from '@/components'
+import { PersonaContext } from '@/components'
 
 const PersonaModal = () => {
   const {
     isOpenPersonaModal: open,
-    personaModalLoading: isLoading,
+    // personaModalLoading: isLoading,
     editPersona: detail,
     onCreatePersona,
     onClosePersonaModal
-  } = useContext(ChatContext)
+  } = useContext(PersonaContext)
 
   const {
     register,
diff --git a/components/Persona/PersonaPanel.component.tsx b/components/Persona/PersonaPanel.component.tsx
index 2e0e45b..821a1bc 100644
--- a/components/Persona/PersonaPanel.component.tsx
+++ b/components/Persona/PersonaPanel.component.tsx
@@ -6,8 +6,10 @@ import { LuMessageSquarePlus } from 'react-icons/lu'
 import { MagnifyingGlassIcon } from '@radix-ui/react-icons'
 import { debounce } from 'lodash-es'
 
-import ChatContext from '../Chat/chat.context'
+// import ChatContext from '../Chat/context'
 import { Persona } from '../interface'
+import { PersonaContext } from './persona.context'
+import { PersonaContextType } from './persona.context'
 import {
   Text,
   Button,
@@ -19,6 +21,7 @@ import {
   ScrollArea,
   Box
 } from '@radix-ui/themes'
+import { ChatContext } from '../Chat'
 
 export interface PersonaPanelProps {}
 
@@ -30,9 +33,12 @@ const PersonaPanel = (props: PersonaPanelProps) => {
     openPersonaPanel,
     onDeletePersona,
     onEditPersona,
-    onCreateChat,
     onOpenPersonaModal,
     onClosePersonaPanel
+  } = useContext(PersonaContext)
+
+  const {
+    onCreateChat
   } = useContext(ChatContext)
 
   const [promptList, setPromptList] = useState<Persona[]>([])
diff --git a/components/Persona/index.ts b/components/Persona/index.ts
index cfb122d..d77ab1c 100644
--- a/components/Persona/index.ts
+++ b/components/Persona/index.ts
@@ -1,2 +1,2 @@
 export { default as PersonaPanel } from './PersonaPanel.component'
-export { default as personaContext } from './persona.context'
+export { PersonaContext, usePersonaContext } from './persona.context'
diff --git a/components/Persona/persona.context.ts b/components/Persona/persona.context.ts
index e3edc41..ba0a8c9 100644
--- a/components/Persona/persona.context.ts
+++ b/components/Persona/persona.context.ts
@@ -1,11 +1,31 @@
 'use client'
 
-import { useCallback, useState } from 'react'
+import { createContext, useCallback, useState } from 'react'
 import { v4 as uuid } from 'uuid'
 
 import { Persona } from '../interface'
 import { useToast } from '..'
-import { uploadFiles } from '../helpers'
+import { uploadFiles, defaultError } from '../helpers'
+
+type PersonaContextType = {
+  DefaultPersonas: Persona[],
+  personas: Persona[],
+  editPersona: Persona | undefined,
+  isOpenPersonaModal: boolean,
+  personaModalLoading: boolean,
+  openPersonaPanel: boolean,
+  personaPanelType: string,
+  onOpenPersonaModal: () => void,
+  onClosePersonaModal: () => void,
+  onCreatePersona: (values: any) => Promise<void>,
+  onDeletePersona: (persona: Persona) => void,
+  onEditPersona: (persona: Persona) => Promise<void>,
+  onOpenPersonaPanel: (type: string) => void,
+  onClosePersonaPanel: () => void,
+  setPersonas: React.Dispatch<React.SetStateAction<Persona[]>>
+};
+
+export type { PersonaContextType };
 
 export const DefaultPersonas: Persona[] = [
   {
@@ -25,6 +45,10 @@ export const DefaultPersonas: Persona[] = [
   }
 ]
 
+
+
+
+
 export const usePersonaContext = () => {
   const { toast } = useToast()
 
@@ -128,4 +152,21 @@ export const usePersonaContext = () => {
   }
 }
 
-export default usePersonaContext
+
+export const PersonaContext = createContext<PersonaContextType>({
+  DefaultPersonas: [],
+  personas: [],
+  editPersona: undefined,
+  isOpenPersonaModal: false,
+  personaModalLoading: false,
+  openPersonaPanel: false,
+  personaPanelType: 'chat',
+  onOpenPersonaModal: defaultError('onOpenPersonaModal'),
+  onClosePersonaModal: defaultError('onClosePersonaModal'),
+  onCreatePersona: defaultError('onCreatePersona'),
+  onDeletePersona: defaultError('onDeletePersona'),
+  onEditPersona: defaultError('onEditPersona'),
+  onOpenPersonaPanel: defaultError('onOpenPersonaPanel'),
+  onClosePersonaPanel: defaultError('onClosePersonaPanel'),
+  setPersonas: defaultError('setPersonas'),
+});
\ No newline at end of file
diff --git a/components/Tools/ToolSelect.tsx b/components/Tools/ToolSelect.tsx
index 79bf57c..0a3446d 100644
--- a/components/Tools/ToolSelect.tsx
+++ b/components/Tools/ToolSelect.tsx
@@ -9,7 +9,7 @@ import {
   Fragment
 } from 'react'
 import { ChatMessage, Tool } from '../interface'
-import ChatContext from '../Chat/chat.context'
+import { ChatContext } from '../Chat/context'
 import { getTools } from '@/app/getResponse'
 import { useAuthContext } from '@/app/authenticate'
 
diff --git a/components/Tools/default_tools.ts b/components/Tools/default_tools.ts
new file mode 100644
index 0000000..e4dca04
--- /dev/null
+++ b/components/Tools/default_tools.ts
@@ -0,0 +1,36 @@
+import { Tool } from '../interface'
+
+export const DefaultTools: Tool[] = [
+  {
+    type: 'function',
+    display: 'Get Weather',
+    function: {
+      name: 'get_current_weather',
+      description: 'Get the current weather in a given location',
+      parameters: {
+        type: 'object',
+        properties: {
+          location: {
+            type: 'string',
+            description: 'The city and state, e.g. San Francisco, CA'
+          },
+          unit: {
+            type: 'string',
+            enum: ['celsius', 'fahrenheit']
+          }
+        },
+        required: ['location']
+      }
+    }
+  },
+  {
+    type: 'function',
+    display: 'get_joke',
+    plugin: 'CAS Scenarios',
+    function: {
+      name: 'get_joke',
+      description: 'Get a joke from the joke database',
+      parameters: {}
+    }
+  }
+]
\ No newline at end of file
diff --git a/components/helpers.ts b/components/helpers.ts
index 20bd0bf..2bd0e66 100644
--- a/components/helpers.ts
+++ b/components/helpers.ts
@@ -16,3 +16,9 @@ export const uploadFiles = async (files: File[]) => {
   })
   return data
 }
+
+export function defaultError(name: string) {
+  return function() {
+    throw new Error(`${name} function must be overridden`);
+  };
+}
diff --git a/components/index.ts b/components/index.ts
index d3ce639..a71e3e6 100644
--- a/components/index.ts
+++ b/components/index.ts
@@ -1,6 +1,5 @@
 export * from './Chat'
 export * from './Link'
-export * from './Chat/Markdown'
 export * from './MobileMenu'
 export * from './Spin'
 export * from './Themes'
diff --git a/components/interface.ts b/components/interface.ts
index 2496b37..6813bac 100644
--- a/components/interface.ts
+++ b/components/interface.ts
@@ -55,9 +55,16 @@ export interface Tool {
 
 export interface Chat {
   id: string
-  persona?: Persona
-  messages?: ChatMessage[]
-  name?: string
+  persona: Persona
+  messages: ChatMessage[]
+  name: string
+  date: number
 }
+export interface ChatGPTInstance {
+  setConversation: (messages: ChatMessage[]) => void
+  getConversation: () => ChatMessage[]
+  focus: () => void
+}
+
 
 export type ChatRole = 'assistant' | 'user' | 'system' | 'tool'
diff --git a/components/localStorage.tsx b/components/localStorage.tsx
new file mode 100644
index 0000000..6ea01f5
--- /dev/null
+++ b/components/localStorage.tsx
@@ -0,0 +1,149 @@
+import React from 'react';
+import { useCallback, useEffect, useRef, useState } from 'react'
+import useLocalStorageState from 'use-local-storage-state';
+import { ChatMessage, Chat } from './interface';
+import { v4 as uuid } from 'uuid'
+
+interface AppState {
+  loaded: boolean
+  // Define the shape of your application state
+}
+
+
+interface LocalStorageState {
+  appState: AppState;
+  chats: {
+    [uuid: string]: Chat;
+  };
+}
+
+export const useLocalStorageContext = (userId:string = 'shared') => {
+
+  const [state, setState] = useLocalStorageState<LocalStorageState>('v1.0.0', {
+    defaultValue: {
+      appState: {
+        loaded:false
+      },
+      chats: {},
+    },
+  });
+
+
+  // Allows us to run know if localStorate has been loaded.
+  useEffect(() => {
+      setState((prevState) => ({
+        ...prevState,
+        appState: {
+          ...prevState.appState,
+          loaded: true,
+        },
+      }))
+  }, []);
+
+
+
+  const setStorageState = (appState: AppState) => {
+    setState((prevState) => ({
+      ...prevState,
+      appState,
+    }));
+  };
+
+  const setChatById = (uuid:string, chat:Chat)=>{
+    setState((prevState) => {
+      return {
+        ...prevState,
+        chats: {
+          ...prevState.chats,
+          [uuid]: chat,
+        },
+      };
+    });
+  };
+
+  const setChatNameById = (uuid: string, name: string) => {
+    setState((prevState) => {
+      const conversation = prevState.chats[uuid];
+      if (conversation) {
+        return {
+          ...prevState,
+          chats: {
+            ...prevState.chats,
+            [uuid]: {
+              ...conversation,
+              name: name,
+            },
+          },
+        };
+      }
+      return prevState;
+    });
+  };
+
+
+  const setMessagesById = (uuid: string, messages: ChatMessage[]) => {
+    setState((prevState) => {
+      const conversation = prevState.chats[uuid];
+
+      if (conversation) {
+        return {
+          ...prevState,
+          chats: {
+            ...prevState.chats,
+            [uuid]: {
+              ...conversation,
+              messages: messages,
+            },
+          },
+        };
+      }
+      return prevState;
+    });
+  };
+
+  const appendMessageById = (uuid: string, message: ChatMessage) => {
+    setState((prevState) => {
+      const conversation = prevState.chats[uuid];
+
+      if (conversation) {
+        return {
+          ...prevState,
+          chats: {
+            ...prevState.chats,
+            [uuid]: {
+              ...conversation,
+              messages: [...(conversation.messages || []), message],
+            },
+          },
+        };
+      }
+      return prevState;
+    });
+  };
+  
+  const getChatById = (id:string):Chat=>{
+    return state.chats[id]
+  }
+
+  const deleteChatById = (uuid: string) => {
+    setState((prevState) => {
+      const { [uuid]: deletedChat, ...updatedChats } = prevState.chats;
+      return {
+        ...prevState,
+        chats: updatedChats,
+      };
+    });
+  };
+  
+  return {
+    state,
+    setStorageState,
+
+    appendMessageById,
+    setMessagesById,
+    getChatById,
+    setChatById,
+    setChatNameById,
+    deleteChatById, // Add the deleteChat function to the returned object
+  };
+};
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 46530bc..2070175 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -11,7 +11,7 @@
         "@radix-ui/react-collapsible": "^1.0.3",
         "@radix-ui/react-icons": "^1.3.0",
         "@radix-ui/react-toast": "^1.1.5",
-        "@radix-ui/themes": "^2.0.0",
+        "@radix-ui/themes": "^2.0.3",
         "@tailwindcss/line-clamp": "^0.4.4",
         "@types/node-fetch": "^2.6.10",
         "axios": "^1.6.0",
@@ -37,6 +37,7 @@
         "sass": "^1.69.5",
         "tailwind-merge": "^2.0.0",
         "tailwindcss-animate": "^1.0.7",
+        "use-local-storage-state": "^19.2.0",
         "uuid": "9.0.0"
       },
       "devDependencies": {
@@ -1163,29 +1164,6 @@
         }
       }
     },
-    "node_modules/@radix-ui/react-separator": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/@radix-ui/react-separator/-/react-separator-1.0.3.tgz",
-      "integrity": "sha512-itYmTy/kokS21aiV5+Z56MZB54KrhPgn6eHDKkFeOLR34HMN2s8PaN47qZZAGnvupcjxHaFZnW4pQEh0BvvVuw==",
-      "dependencies": {
-        "@babel/runtime": "^7.13.10",
-        "@radix-ui/react-primitive": "1.0.3"
-      },
-      "peerDependencies": {
-        "@types/react": "*",
-        "@types/react-dom": "*",
-        "react": "^16.8 || ^17.0 || ^18.0",
-        "react-dom": "^16.8 || ^17.0 || ^18.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        },
-        "@types/react-dom": {
-          "optional": true
-        }
-      }
-    },
     "node_modules/@radix-ui/react-slider": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/@radix-ui/react-slider/-/react-slider-1.1.2.tgz",
@@ -1519,9 +1497,9 @@
       }
     },
     "node_modules/@radix-ui/themes": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/@radix-ui/themes/-/themes-2.0.0.tgz",
-      "integrity": "sha512-XIJkXLzIOerrmk24wpyYnPnHC+z4KdH4uFGKBcMqKSSAly9GuBDWpscdxaEja1AvOJJChpmONsD768M/GOVpfg==",
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/themes/-/themes-2.0.3.tgz",
+      "integrity": "sha512-yaXQ8aWT2P1CQ0Xe6YCRD9HXsfMTvKkrIYkrc4aitCzhGTLS0sjtTqKmrxIWMVA+3DIbEuG9K/8aAMRJBhep8g==",
       "dependencies": {
         "@radix-ui/colors": "^3.0.0",
         "@radix-ui/primitive": "^1.0.1",
@@ -1566,6 +1544,29 @@
         }
       }
     },
+    "node_modules/@radix-ui/themes/node_modules/@radix-ui/react-separator": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-separator/-/react-separator-1.0.3.tgz",
+      "integrity": "sha512-itYmTy/kokS21aiV5+Z56MZB54KrhPgn6eHDKkFeOLR34HMN2s8PaN47qZZAGnvupcjxHaFZnW4pQEh0BvvVuw==",
+      "dependencies": {
+        "@babel/runtime": "^7.13.10",
+        "@radix-ui/react-primitive": "1.0.3"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0",
+        "react-dom": "^16.8 || ^17.0 || ^18.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/@rushstack/eslint-patch": {
       "version": "1.5.1",
       "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.5.1.tgz",
@@ -7712,6 +7713,21 @@
         }
       }
     },
+    "node_modules/use-local-storage-state": {
+      "version": "19.2.0",
+      "resolved": "https://registry.npmjs.org/use-local-storage-state/-/use-local-storage-state-19.2.0.tgz",
+      "integrity": "sha512-z5+n406vi3FzPJW6+lzuL/LJr4VLhXsUq1TWWeHQABL37bnJ159dSUmO7XuwqvACX93ZA9P2vkB8GMDgq1rr7A==",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/astoilkov"
+      },
+      "peerDependencies": {
+        "react": ">=18",
+        "react-dom": ">=18"
+      }
+    },
     "node_modules/use-sidecar": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/use-sidecar/-/use-sidecar-1.1.2.tgz",
diff --git a/package.json b/package.json
index 13e422a..9f21105 100644
--- a/package.json
+++ b/package.json
@@ -16,7 +16,7 @@
     "@radix-ui/react-collapsible": "^1.0.3",
     "@radix-ui/react-icons": "^1.3.0",
     "@radix-ui/react-toast": "^1.1.5",
-    "@radix-ui/themes": "^2.0.0",
+    "@radix-ui/themes": "^2.0.3",
     "@tailwindcss/line-clamp": "^0.4.4",
     "@types/node-fetch": "^2.6.10",
     "axios": "^1.6.0",
@@ -42,6 +42,7 @@
     "sass": "^1.69.5",
     "tailwind-merge": "^2.0.0",
     "tailwindcss-animate": "^1.0.7",
+    "use-local-storage-state": "^19.2.0",
     "uuid": "9.0.0"
   },
   "devDependencies": {
